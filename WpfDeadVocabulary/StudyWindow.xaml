<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WpfDeadVocabulary"
    xmlns:r="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon" x:Class="WpfDeadVocabulary.StudyWindow"
    x:Name="Window"
    Width="800"
    Height="600"
    Title="Dead Vocabulary v1.1" 
    FontFamily="Segoe UI,Comic Sans MS,Arial,微软雅黑" 
    Closing="Window_Closing" 
    KeyDown="Window_KeyDown" 
    Loaded="Window_Loaded"
    WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5">
                            <Grid x:Name="ButtonContent">
                                <ContentPresenter />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonContent" Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="1.2" ScaleY="1.2" CenterX="{Binding ActualWidth, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}" CenterY="{Binding ActualHeight, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonContent" Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9" CenterX="{Binding ActualWidth, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}" CenterY="{Binding ActualHeight, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ImageButtonStyle" TargetType="{x:Type local:MyImageButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:MyImageButton}">
                        <Button Style="{StaticResource ButtonStyle}" Background="{TemplateBinding Background}">
                            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
                                <Image x:Name="ButtonImage" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}" Source="{TemplateBinding ImageSource}"/>
                                <ContentPresenter />
                            </StackPanel>
                        </Button>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ChooseButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="50"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0" Margin="3,3,3,3" CornerRadius="5" Background="DodgerBlue">
                                    <TextBlock Text="{TemplateBinding Tag}" FontSize="20pt" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Border>
                                <TextBlock x:Name="labelContent" Grid.Column="1" Margin="3,3,3,3" FontSize="20pt" TextWrapping="Wrap" Text="{TemplateBinding Content}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="SkyBlue"/>
                            </Trigger>
                            <Trigger Property="Content" Value="">
                                <Setter TargetName="ButtonBorder" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Border Background="LightGray" CornerRadius="2">
                            <Grid Margin="2,2,2,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Ellipse x:Name="circle" Grid.Column="1" Fill="Orange" Width="3" Height="3" />
                                <Border x:Name="block" Grid.Column="0" Background="Gray" CornerRadius="2" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="block" Property="Grid.Column" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="block" Property="Grid.Column" Value="0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <r:Ribbon x:Name="ribbon" Height="Auto" Margin="0,-22,0,0" SelectedIndex="1" SelectionChanged="ribbon_SelectionChanged">
                <r:Ribbon.ApplicationMenu>
                    <r:RibbonApplicationMenu SmallImageSource="images/icon.png">
                        <r:RibbonApplicationMenu.FooterPaneContent>
                            <DockPanel LastChildFill="False">
                                <r:RibbonApplicationMenuItem Header="Exit" ImageSource="images/icon.png" DockPanel.Dock="Right" Click="menuItemSafeQuit_Click"/>
                            </DockPanel>
                        </r:RibbonApplicationMenu.FooterPaneContent>
                        <r:RibbonApplicationMenuItem Header="Exit ( Without Auto Save )" ImageSource="images/icon.png" Click="menuItemUnsafeQuit_Click"/>
                    </r:RibbonApplicationMenu>
                </r:Ribbon.ApplicationMenu>
                <r:RibbonTab Header="Record">
                    <r:RibbonGroup Header="Load">
                        <r:RibbonButton Label="New" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemNew_Click"/>
                        <r:RibbonButton Label="Open" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemLoad_Click"/>
                    </r:RibbonGroup>
                    <r:RibbonGroup Header="Save">
                        <r:RibbonButton Label="Save" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemSave_Click"/>
                        <r:RibbonButton Label="Save As" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemSaveAs_Click"/>
                    </r:RibbonGroup>
                    <r:RibbonGroup Header="Option">
                        <r:RibbonButton Label="Option" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemOption_Click"/>
                    </r:RibbonGroup>
                    <r:RibbonGroup Header="Advanced">
                        <r:RibbonButton Label="Load Excel" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemDecodeFromExcel_Click"/>
                        <r:RibbonButton Label="Clear" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Click="menuItemCloseNowRecord_Click"/>
                    </r:RibbonGroup>
                </r:RibbonTab>
                <r:RibbonTab x:Name="ribbonTabEnviornment" Header="Enviornment">
                    <r:RibbonGroup Header="Windows">
                        <r:RibbonCheckBox x:Name="checkBoxSearchBar" Label="Add Word" LargeImageSource="images/icon.png" SmallImageSource="images/icon.png" Checked="checkBoxSearchBar_Checked" Unchecked="checkBoxSearchBar_Unchecked"/>
                    </r:RibbonGroup>
                </r:RibbonTab>
                <r:RibbonTab x:Name="ribbonTabHide" Header="Hide"/>
            </r:Ribbon>
            <CheckBox x:Name="statusBarItemFullScreen" Style="{StaticResource CheckBoxStyle}" Margin="0,10,10,0" Height="10" Width="30" VerticalAlignment="Top" HorizontalAlignment="Right" IsChecked="{Binding WindowState, Converter={StaticResource WindowState2BoolConverter}, ElementName=Window, Mode=OneWay}" Checked="statusBarItemFullScreen_Checked" Unchecked="statusBarItemFullScreen_Unchecked" />
        </Grid>
        <Grid x:Name="MainPage" Grid.Row="1" SizeChanged="mainPage_SizeChanged">
            <Viewbox>
                <Grid x:Name="viewBoxContainer" Height="530" Width="772" SizeChanged="viewBoxContainer_SizeChanged">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="5*"/>
                        <RowDefinition Height="2*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*" />
                        <ColumnDefinition  Width="3*"/>
                    </Grid.ColumnDefinitions>
                    <Grid Grid.Column="0" Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="30"/>
                        </Grid.ColumnDefinitions>
                        <TextBox x:Name="textBoxInput" Grid.Column="0" Margin="3,3,3,3" FontSize="30pt" BorderThickness="1" PreviewKeyDown="textBoxInput_KeyDown" Text="Input" />
                        <ProgressBar x:Name="progressBarLevel" Grid.Column="1" Margin="3,3,3,3" Background="White" Maximum="15" Orientation="Vertical">
                            <ProgressBar.Style>
                                <Style TargetType="{x:Type ProgressBar}">
                                    <Style.Triggers>
                                        <Trigger Property="Value" Value="0">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="1">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="2">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="3">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="4">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="5">
                                            <Setter Property="Foreground" Value="Yellow"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="6">
                                            <Setter Property="Foreground" Value="Yellow"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="7">
                                            <Setter Property="Foreground" Value="Yellow"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="8">
                                            <Setter Property="Foreground" Value="Yellow"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="9">
                                            <Setter Property="Foreground" Value="Yellow"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="10">
                                            <Setter Property="Foreground" Value="YellowGreen"/>
                                        </Trigger>
                                        <Trigger Property="Value" Value="11">
                                            <Setter Property="Foreground" Value="YellowGreen"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ProgressBar.Style>
                        </ProgressBar>
                    </Grid>
                    <Grid Grid.Column="1" Grid.Row="0">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <local:MyImageButton x:Name="buttonRemember" Grid.Column="0" Margin="3,3,3,3" Style="{StaticResource ImageButtonStyle}" Click="buttonRemember_Click" Background="#FF007F00" ImageWidth="30" ImageSource="/images/True.png" ImageHeight="30">
                            <TextBlock Text="Remember" Foreground="White" FontSize="15pt"/>
                        </local:MyImageButton>
                        <local:MyImageButton x:Name="buttonForget" Grid.Column="1" Margin="3,3,3,3" Style="{StaticResource ImageButtonStyle}" Click="buttonForget_Click" Background="#FF7F0000" ImageWidth="30" ImageSource="/images/False.png" ImageHeight="30">
                            <TextBlock Text="Forget" Foreground="White" FontSize="15pt"/>
                        </local:MyImageButton>
                        <local:MyImageButton x:Name="buttonPeek" Grid.Column="1" Margin="3,3,3,3" Style="{StaticResource ImageButtonStyle}" Click="buttonPeek_Click" Background="#FFFF7F00" ImageWidth="30" ImageSource="/images/Peek.png" ImageHeight="30">
                            <TextBlock Text="Peek" Foreground="White" FontSize="15pt"/>
                        </local:MyImageButton>
                    </Grid>
                    <TextBox x:Name="labelAnswer" Grid.Column="0" Grid.Row="1" Margin="3,3,3,3" BorderThickness="0" IsReadOnly="True" FontSize="30pt" FontWeight="Bold" Text="Answer"/>
                    <Grid Grid.Column="0" Grid.Row="2" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <MediaElement x:Name="mediaWordSpeaker" Grid.Column="0" LoadedBehavior="Manual"   Margin="3,3,3,3" Volume="1"/>
                        <Button x:Name="buttonPlaySound" Grid.Column="0" Margin="3,3,3,3" Click="buttonPlaySound_Click">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border Background="DodgerBlue" CornerRadius="5">
                                        <Grid x:Name="ButtonContent">
                                            <Image x:Name="ButtonImage" Width="30" Height="30" HorizontalAlignment="Center"  VerticalAlignment="Center" Source="/images/Sound1.png"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ButtonImage" Property="Source" Value="/images/Sound2.png"/>
                                            <Setter TargetName="ButtonContent" Property="RenderTransform">
                                                <Setter.Value>
                                                    <ScaleTransform ScaleX="1.2" ScaleY="1.2" CenterX="{Binding ActualWidth, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}" CenterY="{Binding ActualHeight, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                                            <Setter TargetName="ButtonContent" Property="RenderTransform">
                                                <Setter.Value>
                                                    <ScaleTransform ScaleX="0.9" ScaleY="0.9" CenterX="{Binding ActualWidth, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}" CenterY="{Binding ActualHeight, Converter={StaticResource DevideBy2Converter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <TextBox x:Name="labelPho" Grid.Column="1" Margin="3,3,3,3" IsReadOnly="True" BorderThickness="0" FontSize="20pt" Text="Phonetic"/>
                    </Grid>
                    <TextBox x:Name="textBoxNote" Grid.Column="1" Grid.Row="3" Margin="3,3,3,3" FontSize="20pt" AcceptsReturn="True" LostFocus="textBoxNote_LostFocus" Foreground="DarkBlue" Text="Edit your custom note here" BorderBrush="LightGray" TextWrapping="Wrap" >
                        <TextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Text" Value=""/>
                                            <Condition Property="IsMouseOver" Value="False"/>
                                            <Condition Property="IsFocused" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Opacity" Value="0.3"/>
                                    </MultiTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <TextBox x:Name="labelDes" Grid.Column="0" Grid.Row="3" Margin="3,3,3,3" IsReadOnly="True" BorderThickness="0" FontSize="20pt" TextWrapping="Wrap" Text="Description"/>
                    <Grid x:Name="labelChooseDes" Grid.Column="0" Grid.Row="3" Grid.ColumnSpan="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Button x:Name="buttonChoose1" Grid.Row="1" Style="{StaticResource ChooseButtonStyle}" Tag="1" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose2" Grid.Row="2" Style="{StaticResource ChooseButtonStyle}" Tag="2" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose3" Grid.Row="3" Style="{StaticResource ChooseButtonStyle}" Tag="3" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose4" Grid.Row="4" Style="{StaticResource ChooseButtonStyle}" Tag="4" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose5" Grid.Row="5" Style="{StaticResource ChooseButtonStyle}" Tag="5" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose6" Grid.Row="6" Style="{StaticResource ChooseButtonStyle}" Tag="6" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose7" Grid.Row="7" Style="{StaticResource ChooseButtonStyle}" Tag="7" Content="" Click="buttonChoose_Click"/>
                        <Button x:Name="buttonChoose8" Grid.Row="8" Style="{StaticResource ChooseButtonStyle}" Tag="8" Content="" Click="buttonChoose_Click"/>
                    </Grid>
                    <TextBox x:Name="labelSen" Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="2" Margin="3,3,3,3" IsReadOnly="True" BorderThickness="0" FontSize="15pt" TextWrapping="Wrap" Text="Sentence"/>
                    <TextBox x:Name="textBoxWrongWord" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Margin="3,3,3,3" IsReadOnly="True" TextWrapping="Wrap" BorderThickness="1" Text="Comparison" BorderBrush="LightGray"/>
                </Grid>
            </Viewbox>
            <Slider x:Name="statusBarItemHorizonStrech" Margin="0,0,10,10" Height="100" VerticalAlignment="Bottom" HorizontalAlignment="Right" Orientation="Vertical" Value="{Binding Height, ElementName=viewBoxContainer}" Maximum="800" Minimum="400" />
        </Grid>
        <StatusBar x:Name="statusBarMain" Height="20" Grid.Row="2" VerticalAlignment="Bottom" >
            <StatusBarItem >
                <ProgressBar x:Name="statusBarItemProgressBarMain" Height="12" Width="100"/>
            </StatusBarItem>
            <StatusBarItem >
                <TextBlock x:Name="statusBarItemStatusMessage"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <TextBlock x:Name="statusBarItemNowTime" />
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>